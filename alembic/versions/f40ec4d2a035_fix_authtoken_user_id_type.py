"""fix AuthToken.user_id type

Revision ID: f40ec4d2a035
Revises: 
Create Date: 2025-07-30 15:31:13.571991

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f40ec4d2a035'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    
    role_enum = sa.Enum('ADMIN', 'USER', name='roleclient', create_type=False)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Client',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role', role_enum, nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('registered_at', sa.DateTime(), nullable=True),
    sa.Column('oauth_provider', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('Tag',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('AuthToken',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Client.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('PromptRequest',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('prompt_text', sa.Text(), nullable=False),
    sa.Column('style', sa.String(), nullable=False),
    sa.Column('color_pallette', sa.String(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('APPROVED', 'REJECTED', 'PENDING', 'READY', 'ERROR', name='statusrequest'), nullable=True),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Client.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Image',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('prompt_id', sa.UUID(), nullable=True),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('format', sa.String(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['PromptRequest.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('AdminAction',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('admin_id', sa.UUID(), nullable=True),
    sa.Column('target_image_id', sa.UUID(), nullable=True),
    sa.Column('action_type', sa.Enum('CREATE', 'UPDATE', 'DELETE', name='actiontype'), nullable=True),
    sa.Column('reason', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['Client.id'], ),
    sa.ForeignKeyConstraint(['target_image_id'], ['Image.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ImageTag',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('image_id', sa.UUID(), nullable=True),
    sa.Column('tag_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['Image.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['Tag.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Rating',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('image_id', sa.UUID(), nullable=True),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['Image.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['Client.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Rating')
    op.drop_table('ImageTag')
    op.drop_table('AdminAction')
    op.drop_table('Image')
    op.drop_table('PromptRequest')
    op.drop_table('AuthToken')
    op.drop_table('Tag')
    op.drop_table('Client')
    op.execute("DROP TYPE IF EXISTS roleclient")
    # ### end Alembic commands ###
